// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolManagementAPI.Models;

namespace SchoolManagementAPI.Migrations
{
    [DbContext(typeof(SchoolDBContext))]
    [Migration("20200616132226_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SchoolManagementAPI.Models.AppClaim", b =>
                {
                    b.Property<string>("ClaimCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ClaimGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClaimName1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimName2")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClaimCode");

                    b.ToTable("AppClaims");
                });

            modelBuilder.Entity("SchoolManagementAPI.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SchoolManagementAPI.Models.Enrollment", b =>
                {
                    b.Property<Guid>("YearGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SemesterGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GradeGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SectionGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EditedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnrollmentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EnrollmentGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EnrollmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastTimeEdited")
                        .HasColumnType("datetime2");

                    b.HasKey("YearGUID", "SemesterGUID", "GradeGUID", "SectionGUID");

                    b.HasIndex("EnrollmentGUID")
                        .IsUnique();

                    b.HasIndex("EnrollmentId")
                        .IsUnique()
                        .HasFilter("[EnrollmentId] IS NOT NULL");

                    b.HasIndex("GradeGUID");

                    b.HasIndex("SectionGUID");

                    b.HasIndex("SemesterGUID");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("SchoolManagementAPI.Models.EnrollmentAttendance", b =>
                {
                    b.Property<Guid>("EnrollmentGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EditedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EnrollmentAttendanceGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastTimeEdited")
                        .HasColumnType("datetime2");

                    b.HasKey("EnrollmentGUID", "AttendanceDate");

                    b.HasIndex("EnrollmentAttendanceGUID")
                        .IsUnique();

                    b.ToTable("EnrollmentAttendances");
                });

            modelBuilder.Entity("SchoolManagementAPI.Models.EnrollmentSubject", b =>
                {
                    b.Property<Guid>("SubjectGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EnrollmentGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EditedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EnrollmentSubjectGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Included")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastTimeEdited")
                        .HasColumnType("datetime2");

                    b.Property<float>("MaxMark")
                        .HasColumnType("real");

                    b.Property<float>("MinMark")
                        .HasColumnType("real");

                    b.HasKey("SubjectGUID", "EnrollmentGUID");

                    b.HasIndex("EnrollmentGUID");

                    b.HasIndex("EnrollmentSubjectGUID")
                        .IsUnique();

                    b.ToTable("EnrollmentSubjects");
                });

            modelBuilder.Entity("SchoolManagementAPI.Models.EnrollmentSubjectTest", b =>
                {
                    b.Property<string>("TestID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("EnrollmentSubjectGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EditedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EnrollmentSubjectTestGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Included")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastTimeEdited")
                        .HasColumnType("datetime2");

                    b.Property<float>("MaxMark")
                        .HasColumnType("real");

                    b.Property<float>("MinMark")
                        .HasColumnType("real");

                    b.Property<string>("TestName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("TestID", "EnrollmentSubjectGUID");

                    b.HasIndex("EnrollmentSubjectGUID");

                    b.HasIndex("EnrollmentSubjectTestGUID")
                        .IsUnique();

                    b.ToTable("EnrollmentSubjectTests");
                });

            modelBuilder.Entity("SchoolManagementAPI.Models.Grade", b =>
                {
                    b.Property<string>("GradeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EditedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GradeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("GradeGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GradeName1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GradeName2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastTimeEdited")
                        .HasColumnType("datetime2");

                    b.HasKey("GradeId");

                    b.HasIndex("GradeCode")
                        .IsUnique();

                    b.HasIndex("GradeGUID")
                        .IsUnique();

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("SchoolManagementAPI.Models.Section", b =>
                {
                    b.Property<string>("SectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EditedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastTimeEdited")
                        .HasColumnType("datetime2");

                    b.Property<string>("SectionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("SectionGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SectionName1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectionName2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectionSymbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SectionId");

                    b.HasIndex("SectionCode")
                        .IsUnique();

                    b.HasIndex("SectionGUID")
                        .IsUnique();

                    b.HasIndex("SectionSymbol")
                        .IsUnique();

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("SchoolManagementAPI.Models.Semester", b =>
                {
                    b.Property<string>("SemesterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EditedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastTimeEdited")
                        .HasColumnType("datetime2");

                    b.Property<string>("SemesterCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("SemesterGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SemesterName1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SemesterName2")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SemesterId");

                    b.HasIndex("SemesterCode")
                        .IsUnique();

                    b.HasIndex("SemesterGUID")
                        .IsUnique();

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("SchoolManagementAPI.Models.Student", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EditedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EnrollmentGradeGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EnrollmentSectionGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EnrollmentSemesterGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EnrollmentYearGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FatherMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastTimeEdited")
                        .HasColumnType("datetime2");

                    b.Property<string>("MotherMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("StudentGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StudentMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentId");

                    b.HasIndex("StudentCode")
                        .IsUnique();

                    b.HasIndex("StudentGUID")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("EnrollmentYearGUID", "EnrollmentSemesterGUID", "EnrollmentGradeGUID", "EnrollmentSectionGUID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SchoolManagementAPI.Models.StudentAttendance", b =>
                {
                    b.Property<Guid>("StudentGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EnrollmentAttendanceGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Value")
                        .HasColumnType("bit");

                    b.HasKey("StudentGUID", "EnrollmentAttendanceGUID");

                    b.HasIndex("EnrollmentAttendanceGUID");

                    b.ToTable("StudentAttendances");
                });

            modelBuilder.Entity("SchoolManagementAPI.Models.StudentEnrollment", b =>
                {
                    b.Property<Guid>("StudentGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EnrollmentGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EditedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastTimeEdited")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentEnrollmentGUID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentGUID", "EnrollmentGUID");

                    b.HasIndex("EnrollmentGUID");

                    b.HasIndex("StudentEnrollmentGUID")
                        .IsUnique();

                    b.ToTable("StudentEnrollments");
                });

            modelBuilder.Entity("SchoolManagementAPI.Models.StudentSubjectScore", b =>
                {
                    b.Property<Guid>("StudentGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentEnrollmentGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EnrollmentSubjectTestGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EditedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastTimeEdited")
                        .HasColumnType("datetime2");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.HasKey("StudentGUID", "StudentEnrollmentGUID", "EnrollmentSubjectTestGUID");

                    b.HasIndex("EnrollmentSubjectTestGUID");

                    b.HasIndex("StudentEnrollmentGUID");

                    b.ToTable("StudentSubjectScore");
                });

            modelBuilder.Entity("SchoolManagementAPI.Models.Subject", b =>
                {
                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EditedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EnrollmentGradeGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EnrollmentSectionGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EnrollmentSemesterGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EnrollmentYearGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GLevel")
                        .HasColumnType("int");

                    b.Property<int>("General")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastTimeEdited")
                        .HasColumnType("datetime2");

                    b.Property<string>("ParentSubjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubjectCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("SubjectGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubjectName1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectName2")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubjectId");

                    b.HasIndex("ParentSubjectId");

                    b.HasIndex("SubjectCode")
                        .IsUnique();

                    b.HasIndex("SubjectGUID")
                        .IsUnique();

                    b.HasIndex("EnrollmentYearGUID", "EnrollmentSemesterGUID", "EnrollmentGradeGUID", "EnrollmentSectionGUID");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("SchoolManagementAPI.Models.Teacher", b =>
                {
                    b.Property<string>("TeacherId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EditedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastTimeEdited")
                        .HasColumnType("datetime2");

                    b.Property<string>("TeacherCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("TeacherGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TeacherMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TeacherId");

                    b.HasIndex("TeacherCode")
                        .IsUnique();

                    b.HasIndex("TeacherGUID")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("SchoolManagementAPI.Models.Year", b =>
                {
                    b.Property<string>("YearId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EditedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastTimeEdited")
                        .HasColumnType("datetime2");

                    b.Property<string>("YearCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("YearGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("YearName1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YearName2")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("YearId");

                    b.HasIndex("YearCode")
                        .IsUnique();

                    b.HasIndex("YearGUID")
                        .IsUnique();

                    b.ToTable("Years");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SchoolManagementAPI.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SchoolManagementAPI.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementAPI.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SchoolManagementAPI.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementAPI.Models.Enrollment", b =>
                {
                    b.HasOne("SchoolManagementAPI.Models.Grade", "Grade")
                        .WithMany("Enrollments")
                        .HasForeignKey("GradeGUID")
                        .HasPrincipalKey("GradeGUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementAPI.Models.Section", "Section")
                        .WithMany("Enrollments")
                        .HasForeignKey("SectionGUID")
                        .HasPrincipalKey("SectionGUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementAPI.Models.Semester", "Semester")
                        .WithMany("Enrollments")
                        .HasForeignKey("SemesterGUID")
                        .HasPrincipalKey("SemesterGUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementAPI.Models.Year", "Year")
                        .WithMany("Enrollments")
                        .HasForeignKey("YearGUID")
                        .HasPrincipalKey("YearGUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementAPI.Models.EnrollmentAttendance", b =>
                {
                    b.HasOne("SchoolManagementAPI.Models.Enrollment", "Enrollment")
                        .WithMany("EnrollmentAttendances")
                        .HasForeignKey("EnrollmentGUID")
                        .HasPrincipalKey("EnrollmentGUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementAPI.Models.EnrollmentSubject", b =>
                {
                    b.HasOne("SchoolManagementAPI.Models.Enrollment", "Enrollment")
                        .WithMany("EnrollmentSubjects")
                        .HasForeignKey("EnrollmentGUID")
                        .HasPrincipalKey("EnrollmentGUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementAPI.Models.Subject", "Subject")
                        .WithMany("EnrollmentSubjects")
                        .HasForeignKey("SubjectGUID")
                        .HasPrincipalKey("SubjectGUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementAPI.Models.EnrollmentSubjectTest", b =>
                {
                    b.HasOne("SchoolManagementAPI.Models.EnrollmentSubject", "EnrollmentSubject")
                        .WithMany("EnrollmentSubjectTests")
                        .HasForeignKey("EnrollmentSubjectGUID")
                        .HasPrincipalKey("EnrollmentSubjectGUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementAPI.Models.Student", b =>
                {
                    b.HasOne("SchoolManagementAPI.Models.AppUser", "User_1")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementAPI.Models.Enrollment", null)
                        .WithMany("EnrollmentStudents")
                        .HasForeignKey("EnrollmentYearGUID", "EnrollmentSemesterGUID", "EnrollmentGradeGUID", "EnrollmentSectionGUID");
                });

            modelBuilder.Entity("SchoolManagementAPI.Models.StudentAttendance", b =>
                {
                    b.HasOne("SchoolManagementAPI.Models.EnrollmentAttendance", "EnrollmentAttendances")
                        .WithMany("StudentAttendances")
                        .HasForeignKey("EnrollmentAttendanceGUID")
                        .HasPrincipalKey("EnrollmentAttendanceGUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementAPI.Models.Student", "Student")
                        .WithMany("StudentAttendances")
                        .HasForeignKey("StudentGUID")
                        .HasPrincipalKey("StudentGUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementAPI.Models.StudentEnrollment", b =>
                {
                    b.HasOne("SchoolManagementAPI.Models.Enrollment", "Enrollment")
                        .WithMany("StudentEnrollments")
                        .HasForeignKey("EnrollmentGUID")
                        .HasPrincipalKey("EnrollmentGUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementAPI.Models.Student", "Student")
                        .WithMany("StudentEnrollments")
                        .HasForeignKey("StudentGUID")
                        .HasPrincipalKey("StudentGUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementAPI.Models.StudentSubjectScore", b =>
                {
                    b.HasOne("SchoolManagementAPI.Models.EnrollmentSubjectTest", "EnrollmentSubjectTest")
                        .WithMany("StudentSubjectScores")
                        .HasForeignKey("EnrollmentSubjectTestGUID")
                        .HasPrincipalKey("EnrollmentSubjectTestGUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementAPI.Models.StudentEnrollment", "StudentEnrollment")
                        .WithMany("StudentSubjectScores")
                        .HasForeignKey("StudentEnrollmentGUID")
                        .HasPrincipalKey("StudentEnrollmentGUID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagementAPI.Models.Student", "Student")
                        .WithMany("StudentSubjectScores")
                        .HasForeignKey("StudentGUID")
                        .HasPrincipalKey("StudentGUID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementAPI.Models.Subject", b =>
                {
                    b.HasOne("SchoolManagementAPI.Models.Subject", "Subject1")
                        .WithMany()
                        .HasForeignKey("ParentSubjectId");

                    b.HasOne("SchoolManagementAPI.Models.Enrollment", null)
                        .WithMany("Subjects")
                        .HasForeignKey("EnrollmentYearGUID", "EnrollmentSemesterGUID", "EnrollmentGradeGUID", "EnrollmentSectionGUID");
                });

            modelBuilder.Entity("SchoolManagementAPI.Models.Teacher", b =>
                {
                    b.HasOne("SchoolManagementAPI.Models.AppUser", "User_1")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
